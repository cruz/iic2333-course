---
title: Capa de Aplicación
layout: slide
---

section
  h2 Capa de Aplicación

  section
    img src='/images/figures/11-applayer.png' style="background:none; border:none; box-shadow:none;" width="40%"

  section
    div style="width:65%; vertical-align:middle; display:inline-block;" 

      blockquote style="background:#B7E1CD;" Comunicación de <b>procesos</b> mediante <b>mensajes</b>

      div style="text-align:left;" Aplicaciones se construyen a través de procesos en distintos nodos que se comunican

      ul
        li Web
        li Email
        li DNS
        li Whatsapp
        li Torrent
        li etc &hellip;

    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-applayer.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section

    div style="width:65%; vertical-align:middle; display:inline-block;" 

      blockquote style="background:#B7E1CD;" Comunicación de <b>procesos</b> mediante <b>mensajes</b>

      div Algunos protocolos de capa de aplicación:

      ul
        li DNS, Domain Name System
        li HTTP, Hypertext Transfer Protocol
        li FTP, File Transfer Protocol
        li SSH, Secure Shell
        li TELNET, Remote Shell
        li SMTP, Simple Mail Transfer Protocol
        li POP, Post-Office Protocol
        li IMAP, Internet Message Access Protocol
        li NTP, Network Time Protocol
        li IRC, Internet Relay Chat
        li LDAP, Lightweight Directory Access Protocol

    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-applayer.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div style="width:65%; vertical-align:middle; display:inline-block;" 

      blockquote style="background:#B7E1CD;" Arquitectura <b>client-servidor</b>/

      div style="text-align:left;" Aplicaciones se construyen a través de procesos en distintos nodos que se comunican

      ul
        li Clientes se comunican con servidor
        ul style='font-size:24px;'
          li Clientes no se comunican entre ellos
        li Servidor posee una dirección fija y conocida
        li Servidor puede recibir múltiples solicitudes
        ul style='font-size:24px;'
          li Requerimientos intensivos en infraestructura
          li Capacidad de atención, ancho de banda, &hellip;
          li Suelen ubicarse en <b>data center</b>s

      div style="text-align:left;" Web, FTP, Telnet, SSH, email, &hellip;

    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-clientserver.png' style="background:none; border:none; box-shadow:none;" width="100%"


  section
    div style="width:65%; vertical-align:middle; display:inline-block;" 

      blockquote style="background:#B7E1CD;" Arquitectura <b>peer-to-peer</b> (P2P)/

      div style="text-align:left;" Aplicaciones se construyen en base a comunicación directa entre miembros (pares)

      ul
        li Requerimientos mínimos en existencia de servidores
        li Facilita auto-escalabilidad
        ul style='font-size:24px;'
          li Miembros añaden capacidades a la red

      div style="text-align:left;" BitTorrent, download accelerators, telefonía por internet (Skype), IPTV

      div Desafíos
      ul
        li ISP Friendly
        ul style='font-size:24px;'
          li Muchas conexiones son asimétricas
        li Seguridad
        ul style='font-size:24px;'
          li Múltiples puntos de vulnerabilidad
        li Incentivos
        ul style='font-size:24px;'
          li ¿Por qué podría querer aportar recursos a la red?

    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-archp2p.png' style="background:none; border:none; box-shadow:none;" width="100%"
      
  section
    h3 Sockets

    img src='/images/figures/11-appsockets.png' style="background:none; border:none; box-shadow:none;" width="50%"

    blockquote style="background:#B7E1CD;" <b>Socket</b>: elemento de software que interactúa con la red

    ul
      li <i>Socket</i> es una puerta de entrada/salida al sistema
      li <i>Socket</i> <b>utiliza</b> servicios de transporte (capa inferior)
      li Solo existe en hosts de origen y destino (<i>end-nodes</i>)


  section
    h3 Sockets

    img src='/images/figures/11-appsockets.png' style="background:none; border:none; box-shadow:none;" width="50%"

    blockquote style="background:#B7E1CD;" <b>Socket</b>: elemento de software que interactúa con la red

    ul
      li <i>Socket</i> es una interfaz para entre el programador y la red
      li Programador puede controlar parámetros del <i>socket</i>
      ul style='font-size:24px;'
        li Tipo de servicio de transporte (TCP / UDP)
        li Direccionamiento del <i>host</i> remoto (IP + puerto)
      

  section
    h3 Sockets

    img src='/images/figures/11-appreqs.png' style="background:none; border:none; box-shadow:none;" width="60%"

    div Aplicaciones imponen distintos requisitos al servicio de transporte


section
  h2 Programación de Sockets

  section
    h3 Sockets

    div Una vez que ambos extremos, cliente y servidor, poseen un <i>socket</i>, es posible mandar mensajes.

    br
    br

    div <i>Socket</i> requiere definición de:

    ul
      li <b>Tipo de servicio de transporte</b>
      ul style='font-size:24px;'
        li UDP: comunicación rápida, no confiable (<i>unreliable</i>)
        li TCP: comunicación confiable

    ul 
      li <b>Dirección del extremo opuesto</b>
      ul style='font-size:24px;'
        li Dirección IP remota
        li Puerto remoto. Cada <i>socket</i> está asociado a <b>un puerto</b>


  section
    h3 Aplicación con Sockets

    div Aplicación de ejemplo

    ol
      li Cliente lee una línea desde la entrada estándar (<i>stdin</i>)
      li Cliente envía línea al servidor
      li Servidor recibe línea
      li Servidor convierte caracteres a mayúsculas (<i>uppercase</i>)
      li Servidor envía línea modificada al cliente
      li Cliente recibe línea
      li Cliente escribe la línea en la salida estándar (<i>stdout</i>)


  section
    h3 Conexión UDP

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Creación de <i>socket</i> con <code>AF_INET</code>, <code>SOCK_DGRAM</code>

      div style='font-size:28px;' <code>int socket(int domain, int type, int protocol);</code>

      br

      ul
        li style='font-size:28px;' <code>domain</code>. Familia de protocolos. Ej: <code>AF_LOCAL</code>, <code>AF_INET</code>, <code>AF_PACKET</code>, &hellip;
        li style='font-size:28px;' <code>type</code>. Tipo de <i>socket</i>. Ej: <code>SOCK_DGRAM</code>, <code>SOCK_STREAM</code>
        li style='font-size:28px;' <code>protocol</code>. Protocolo. Default: <code>0</code>. Se suele determinar según <code>domain</code> y <code>type</code>

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-conexionudp.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Conexión UDP

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Envío de mensaje UDP

      div style='font-size:28px;' <code>ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);</code>

      br

      ul
        li style='font-size:28px;' <code>sockfd</code>. <i>Socket</i> obtenido de <code>socket</code>
        li style='font-size:28px;'  <code>buf</code>. <i>Buffer</i> con datos a enviar
        li style='font-size:28px;'  <code>len</code>. Longitud (byte) de los datos a enviar
        li style='font-size:28px;'  <code>flags</code>. Flags.
        li style='font-size:28px;'  <code>dest_addr</code>. <i>struct</i> con datos de destino.
        li style='font-size:28px;'  <code>addrlen</code>. Tamaño de <code>dest_addr</code>
        
      div Retorno: cantidad de bytes enviados

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-conexionudp.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Conexión UDP

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Recepción de mensaje UDP

      div style='font-size:28px;' <code>ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                 struct sockaddr *src_addr, socklen_t *addrlen);</code>

      br

      ul
        li style='font-size:28px;'  <code>sockfd</code>. <i>Socket</i> obtenido de <code>socket</code>
        li style='font-size:28px;'  <code>buf</code>. <i>Buffer</i> con datos a enviar
        li style='font-size:28px;'  <code>len</code>. Longitud (byte) de los datos a enviar
        li style='font-size:28px;'  <code>flags</code>. Flags.
        lli style='font-size:28px;' i <code>src_addr</code>. <i>struct</i> con datos de destino. Si es <code>NULL</code>, se ignora.
        li style='font-size:28px;'  <code>addrlen</code>. Tamaño de <code>src_addr</code>
        
      div Retorno: cantidad de bytes recibidos

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-conexionudp.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Conexión TCP

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Establecimiento de conexión: <b>TCP Handshake</b>

      ul
        li Requiere establecer conexión antes de enviar
        li Cliente inicia solicitud de conexión en un puerto conocido del servidor
        li Servidor debe tener un <i>socket</i> en ese puerto
        li Servidor debe aceptar la conexión
        li Al aceptar la conexión, servidor asigna <b>nuevo socket</b> para la conexión

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-handshake.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Conexión TCP

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Creación de <i>socket</i> con <code>AF_INET</code>, <code>SOCK_STREAM</code>

      div Cliente solicita conexión

      div style='font-size:28px;' <code>int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code>


    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-conexiontcp.png' style="background:none; border:none; box-shadow:none;" width="100%"






























section
  h2 HTTP

  section
    h3 HyperText Transfer Protocol

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Un servicio de archivos remoto. RFC1945, RFC2616.
      ul
        li Modelo cliente-servidor
        li Cliente HTTP: solicita y recibe archivos
        ul style='font-size:24px;'
          li Opcionalmente podría parsearlos e interpretarlos localmente
          
        li Servidor HTTP: recibe solicitudes y envía archivos
    
      br
      br
      div HTTP define el formato de los mensajes

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-http.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Acceso a URL. Conexión no-persistente.

    div <code>http://iic2333.ing.puc.cl/slides/5-disk.html</code>

    br

    ol style='font-size:32px;'
      li Cliente HTTP inicia conexión TCP a <code>iic2333.ing.puc.cl</code> en puerto 80. Socket en cliente, y socket en server.
      li Cliente HTTP envía <i>Request HTTP</i> incluyendo ruta y archivo: <code>slides/5-disk.html</code>
      li Servidor HTTP recibe <i>Request HTTP</i>, busca el archivo <code>slides/5-disk.html</code>, lo encapsula en <i>Response HTTP</i>, y envía al cliente a través de su <i>socket</i>
      li Servidor HTTP indica a <i>socket</i> que cierre la conexión TCP.
      li Cliente HTTP recibe <i>Response HTTP</i> y extrae el archivo. Examina el archivo HTML y encuentra referencias a otros archivos (por ejemplo, imágenes JPG, PNG)
      li Cliente puede re-ejecutar los pasos 1 al 4, para cada archivo que necesite.

    br
    br

    div Servidores HTTP actuales usan conexiones persistentes y <i>pipelining</i>.

  section
    h3 HTTP Request

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div style="text-align:left;" <code>GET /slides/5-disk.html HTTP/1.1</code>
      div style="text-align:left;" <code>Host: iic2333.ing.puc.cl</code>
      div style="text-align:left;" <code>Connection: close</code>
      div style="text-align:left;" <code>User-agent: Mozilla/5.0</code>
      div style="text-align:left;" <code>Accept-language: es</code>

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-http-req.png' style="background:none; border:none; box-shadow:none;" width="100%"



  section
    h3 HTTP Response

    div style="width:65%; vertical-align:middle; display:inline-block;" 

      div style="text-align:left;" <code>HTTP/1.1 200 OK</code>
      div style="text-align:left;" <code>Connection: close</code>
      div style="text-align:left;" <code>Date: Wed Jun 15 01:20:33 CLT 2016</code>
      div style="text-align:left;" <code>Server: Apache/2.2.3 (CentOS)</code>
      div style="text-align:left;" <code>Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT</code>
      div style="text-align:left;" <code>Content-Length: 6821</code>
      div style="text-align:left;" <code>Content-Type: text/html</code>
      div style="text-align:left;" <code>&nbsp;</code>
      div style="text-align:left;" <code>data ... data ... data ...</code>

    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-http-resp.png' style="background:none; border:none; box-shadow:none;" width="100%"


  section

    div Algunos códigos

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      ul
        li 1xx. Mensaje de información.
        li 2xx. Mensaje de éxito
        ul style='font-size:28px;'
          li 200 OK
          li 206 Partial Content
        
        li 3xx. Mensaje de redirección
        ul style='font-size:28px;'
          li 301 Moved Permanently
          li 307 Temporary Redirect

    div style="width:50%; vertical-align:middle; display:inline-block;" 
      
      ul 
        li 4xx. Mensaje de error del cliente
        ul style='font-size:28px;'
          li 400 Bad Request
          li 403 Forbidden
          li 404 Not Found
          li 405 Method Not Allowed
        
        li 5xx. Mensaje de error del servidor
        ul style='font-size:28px;'
          li 500 Internal Server Error
          li 501 Not Implemented
          li 502 Bad Gateway
          li 503 Server Not Available

  section
    div Conexiones HTTP son <i>stateless</i> ... o casi

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div <i>Cookies</i> se almacenan <b>en el cliente</b>
      br
      div <i>Cookies</i> se envían en conexiones posteriores.
      br
      div Servidor utiliza <i>cookies</i> para <b>recordar</b> estado del cliente.

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-http-cookies.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Web Caching

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div Contenido que no cambia (estático) puede ser almacenado en servidores intermedio: <b>web proxy</b>

      br
      br

      div <b>CDN</b>: Content Delivery Network. Usan esta idea a nivel de redes de rápido acceso, cercanas al cliente.

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-http-proxy.png' style="background:none; border:none; box-shadow:none;" width="100%"

section
  h2 FTP

  section
    h3 File Transfer Protocol

    div Transferencia de archivos entre sistema local y remoto

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      br      
      div Comandos
      ul
        li <code>USER username</code>
        li <code>PASS password</code>
        li <code>LIST</code>
        li <code>RETR filename</code>
        li <code>STOR filename</code>

    div style="width:40%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/11-ftp.png' style="background:none; border:none; box-shadow:none;" width="100%"


section
  h2 Correo Electrónico

  section
    h3 SMTP, POP, IMAP

    div style="width:60%; vertical-align:middle; display:inline-block;" 
      div Protocolo de envío: SMTP (RFC5321)
      ul style='font-size:28px;'
        li Simple Mail Transfer Protocol
        li Puerto 25
      br
      br
      div Protocolo de lectura: POP3 (RFC1939)
      ul style='font-size:28px;'
        li Post Office Protocol
        li Puerto 110
        li No mantiene estado
      br
      br
      div Protocolo de lectura: IMAP (RFC3501)
      ul style='font-size:28px;'
        li Internet Mail Access Protocol
        li Permite creación de directorios en servidor
        li Mantiene estado del lector

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-smtp.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 SMTP, POP, IMAP

    div style="width:60%; vertical-align:middle; display:inline-block;" 
      div Protocolo de envío: SMTP (RFC5321)
      ul style='font-size:28px;'
        li Simple Mail Transfer Protocol
        li Puerto 25
      br
      br
      div Protocolo de lectura: POP3 (RFC1939)
      ul style='font-size:28px;'
        li Post Office Protocol
        li Puerto 110
        li No mantiene estado
      br
      br
      div Protocolo de lectura: IMAP (RFC3501)
      ul style='font-size:28px;'
        li Internet Mail Access Protocol
        li Permite creación de directorios en servidor
        li Mantiene estado del lector

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-smtptext.png' style="background:none; border:none; box-shadow:none;" width="100%"

      div Ejemplo SMTP


















section
  h2 DNS

  section
    h3 Domain Name System

    div Antes de iniciar la conexión TCP para el protocolo HTTP a URL:
    div <code>http://iic2333.ing.puc.cl/slides/5-disk.html</code>
    br

    ol style='font-size:32px;'
      li Cliente ejecuta proceso cliente DNS
      li Browser extrae <code>iic2333.ing.puc.cl</code> y lo pasa al cliente DNS
      li Cliente DNS envía <i>query</i> por <code>iic2333.ing.puc.cl</code> a servidor DNS
      li Cliente DNS recibe respuesta de servidor DNS, que incluye IP de <code>iic2333.ing.puc.cl</code>
      li Cliente DNS pasa respuesta a browser
      li Cliente HTTP inicia conexión TCP a la IP de <code>iic2333.ing.puc.cl</code>

    br
    br
    div DNS utiliza una estructura jerárquica de dominos y servidores

  section
    h3 Domain Name System

    div Base de datos distribuida y jerárquica

    div
      img src='/images/figures/11-dns-hier.png' style="background:none; border:none; box-shadow:none;" width="60%"


  section

    div Servidores almacenan <i>mapping</i>s 

    div style="width:40%; vertical-align:middle; display:inline-block;" 

      ul style='font-size:32px;'
        li Si no conoce un <i>mapping</i>, lo consulta a un servidor superior en la jerarquía
        li Eventualmente puede llegar a servidor raíz
        li Servidores raíz conocen ubicación de servidores TLD
        ul style='font-size:24px;'
          li gTLD: General Top-Level Domain. <code>.com</code>, <code>.org</code>, <code>.edu</code> 
          li ccTLD: Country-Code Top-Level Domain. <code>.cl</code>, <code>.nl</code>, <code>.es</code>, <code>.au</code>
        
        li 13 servidores raíz en el mundo: A,B,C,D,E,F,G,H,I,J,K,L,M
        ul style='font-size:24px;'
          li Con múltiples instancias de cada uno (cuatro de ellos replicados en Chile)
          li <code>http://www.root-servers.org</code>
        
        li Servidores que administran el mapping son <i>servidores autoritativos</i>
        ul style='font-size:24px;'
          li Servidores autoritativos administran el mapping (al nivel de institución)
          li Servidores no-autoritativos mantienen temporalmente el mapping

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-dns-map.png' style="background:none; border:none; box-shadow:none;" width="100%"


  section
    div Consultas <i>iterativas</i> y <i>recursivas</i>

    div style="width:70%; vertical-align:middle; display:inline-block;" 
      div Consultas iterativas (1,2) envían respuesta (completa o parcial) al origen
      br
      br
      div Consultas recursivas (4,6) reenvían la consulta

    div style="width:30%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-dns-inter1.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Consultas <i>iterativas</i> y <i>recursivas</i>

    div style="width:70%; vertical-align:middle; display:inline-block;" 
      div Consulta recursiva
      br
      br

    div style="width:30%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-dns-inter2.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section

    div Al resolver un mapping, éste es almacenado en los servidores
    ul
      li Caching de respuestas permite reducir el tráfico
      li Respuestas <i>cached</i> posee un <i>timeout</i>
      li Servidores TLD suelen estar en cache de servidores locales
      li Servidores raíz no son tan visitados
    
  section

    div
      img src='/images/figures/11-dns-format.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div <code>(nombre, valor, tipo, ttl)</code>
  
    ul
      li Tipo A: <code>nombre</code> es nombre del host; <code>valor</code> es dirección IP
      li Tipo NS: <code>nombre</code> es dominio; <code>valor</code> es IP de host autoritativo
      li Tipo CNAME: alias, <code>nombre</code> es alias; <code>valor</code> es nombre real
      li Tipo MX: <code>valor</code> es el nombre de un <i>mail server</i>


  section

    div <code>(nombre, valor, tipo, ttl)</code>
    br
    ul
      li Tipo A: <code>nombre</code> es nombre del host; <code>valor</code> es dirección IP
      ul
        li <code>(relay1.bar.foo.com, 145.37.93.126, A)</code>
      br
      li Tipo NS: <code>nombre</code> es dominio; <code>valor</code> es IP de host autoritativo
      ul
        li <code>(foo.com, dns.foo.com, NS)</code>
      br
      li Tipo CNAME: alias, <code>nombre</code> es alias; <code>valor</code> es nombre real
      ul
        li <code>(foo.com, relay1.bar.foo.com, CNAME)</code>
      br
      li Tipo MX: <code>valor</code> es el nombre de un <i>mail server</i>
      ul
        li <code>(foo.com, mail.bar.foo.com, MX)</code>


section
  h2 Redes P2P

  section
    h3 Peer-to-Peer

    div style="width:60%; vertical-align:middle; display:inline-block;" 
      div Redes entre pares
      br
      div No dependen de un servidor
      ul style='font-size:24px;'
        li Mejor escalabilidad
        li Deben maneja pertenencia y abandono de miembros      

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-p2p-torrent.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Distributed Hash Table

    div style="width:60%; vertical-align:middle; display:inline-block;" 
      div Método de direccionamiento para redes P2P <b>estructuradas</b>
      br
      div Cada miembro posee una identificación única
      ul style='font-size:24px;'
        li Se construye una <i>overlay network</i> entre miembros
        li Miembros se encarga de enrutar mensajes

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/11-p2p-dht.png' style="background:none; border:none; box-shadow:none;" width="100%"



