---
title: Administración de Memoria
layout: slide
---


section
  h2 Memoria

  section#memory0
    h3 Direcciones de Memoria

    div 

      ul
        li Un gran arreglo de <i>bytes</i>
        li Cada uno con su propia <b>dirección</b>

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      div Al principio &hellip;

      img src='/images/figures/02-memory-old.png' width="40%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

    div.fragment style="width:50%; vertical-align:middle; display:inline-block;" 

      div Con multiprogramación &hellip;

      img src='/images/figures/02-memory-new.png' width="35%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section data-transition="fade-out"
    h3 Direcciones de Memoria

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      div Con solamente un proceso en memoria &hellip;

      pre
        code.hljs.asm
          |  mov %eax, 0x10000       ; a += 3
             add %eax, $0x3
             mov 0x10000, %eax


      div La vida del compilador es (más) fácil

      ul
        li Programa siempre se carga en la misma dirección
        li Cada variable tiene la misma dirección en memoria en cada ejecución

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/02-memory-old.png' width="50%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section data-transition="fade-in fade-out"
    h3 Direcciones de Memoria

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      div Con múltiples procesos en memoria (<i>multiprogramación</i>) &hellip;

      pre
        code.hljs.asm
          |  mov %eax, 0x10001       ; falla si a no está en 0x10000
             add %eax, $0x3
             mov 0x10001, %eax

      div Procesos puede cargarse en cualquier parte de la memoria

      div Problema 1:
      ul
        li Variables no están siempre en la misma ubicación
        li Requisito: <b>relocalización de variables</b>

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/02-memory-new.png' width="50%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"


  section data-transition="fade-in fade-out"
    h3 Direcciones de Memoria

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      div Con múltiples procesos en memoria (<i>multiprogramación</i>) &hellip;

      pre
        code.hljs.asm
          |  mov %eax, 0x20001       ; 0x20001 es memoria de C
             add %eax, $0x3
             mov 0x20001, %eax

      div Procesos puede cargarse en cualquier parte de la memoria

      div Problema 2:
      ul
        li Un proceso, por error, podría leer memoria y modificar memoria de otro proceso
        li Requisito: <b>protección de memoria</b>

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/02-memory-new.png' width="50%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section data-transition="fade-in fade-out"
    h3 Direcciones de Memoria

    div style="width:40%; vertical-align:middle; display:inline-block;" 

      div <b>Direcciones absolutas no sirven con multiprogramación</b>
      ul
        li Caso (a). Un proceso único en memoria, de 16KB, cargado en 0.
        li Caso (b). Otro proceso único en memoria, de 16KB, cargado en 0.
        li Caso (c). Dos procesos de 16KB cargados en memoria, de manera contigua.

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/04-spaces.png' width="75%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section data-transition="fade-in"
    h3 Relocalización y protección

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      div <b>Direcciones absolutas no sirven con multiprogramación</b>
      ul
        li Caso (b). Instrucción <code>JMP 28</code> está OK si el proceso está cargado en 0.
        li Caso (c). Si el proceso se carga en 0, hay que cambiar <code>JMP 28</code> por <code>JMP 16412</code>.
        li ¿Cómo conseguirlo?
        ul.fragment
          li Compilador podría generar: <code>JMP 28+X</code> 
          li Al cargar en memoria se determina que <code>X</code> es 16384, y se carga en memoria <code>JMP 16412</code>
          li Ejecutar esto cada vez que se cargue

    div style="width:50%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/04-spaces.png' width="75%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section
    h3 Direcciones de memoria

    div ¿Cómo podemos saber donde se ubica nuestro código?

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      pre
        code.hljs.lang-c
          |  #include &lt;stdio.h&gt;
             #include &lt;stdlib.h&gt;

             int b = 3;

             int main(int argc, char *argv[]) {
               int x=3;
               printf("Location of code   : %p\n", (void *)main);
               printf("Location of data   : %p\n", (void *)&b);
               printf("Location of heap   : %p\n", (void *)malloc(1));
               printf("Location of stack  : %p\n", (void *)&x);
               return x;
             }

      div.fragment Atención: estas direcciones son <b>virtuales</b> &#x1f632;

    div style="width:40%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/02-memory-sections.png' width="75%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"


section
  h2 Espacios de direcciones

  section
    div Dos problemas: (1)<b>relocalización</b> y (2)<b>protección</b>

    blockquote.fragment data-fragment-index="1" style="background:#B7E1CD;" Abstracción: <b>espacios de direcciones</b>

    div.fragment data-fragment-index="2" style="width:60%; vertical-align:middle; display:inline-block;" 

      div CPUs desde CDC6600 hasta Intel 8088 integran dos registros: <code>base</code> y <code>limit</code><br/><br/>

      ul
        li Al cargar cada procesos se cargan estos registros
        li Proceso quiere ejecutar <code>JMP 28</code>
        li Pero <i>hardware</i> ejecuta <code>JMP 28+16384</code>
        li Si la dirección es mayor que <code>limit</code>, se genera un <i>trap</i>
        li MMU: <b>Memory Manager Unit</b>

      div.fragment data-fragment-index="3" ¿Resuelto?

    div.fragment data-fragment-index="2" style="width:40%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/04-twoprocs.png' width="70%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section
    h3 Sobrecarga de memoria

    div ¿Cuántos procesos caben en memoria? ¿Qué pasa si la memoria se llena?

    blockquote.fragment data-fragment-index="1" style="background:#B7E1CD;"  Operaciones de <b>swapping</b>

    div.fragment data-fragment-index="2" style="width:60%; vertical-align:middle; display:inline-block;" 

      ul
        li <b>Swap-out</b>. Memoria del proceso se copia a disco.
        li <b>Swap-in</b>. Memoria del proceso se copia de disco a memoria.

      div.fragment data-fragment-index="3" ¿Qué pasa con la relocalización?

    div.fragment data-fragment-index="2" style="width:40%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/02-8_05.pdf.png' width="80%" style="background:none; border:none; box-shadow:none; vertical-align:middle;"

  section
    div Procesos pueden ser cargados y descargados de la memoria

    == image_tag '/images/figures/02-8_05.pdf.png', :width=>"50%", :style=>"border:none; box-shadow:none;"

    div Memoria del sistema queda con huecos



section#spaces0
  h2 Cargando procesos

  section#spaces1
    div Procesos pueden ser cargados y descargados de la memoria

    div 

  section#spaces2
    div Espacio libre se modifica en cada carga/<i>swap-in</i> o descarga/<i>swap-out</i>

    div == image_tag '/images/figures/04-loadprocs.png', :width=>"70%"

  section#spaces3
    div Direcciones deben ajustarse ante cada carga

    div == image_tag '/images/figures/02-8_06.pdf.png', :width=>"70%"

  section#spaces4
    div <b>¿Dónde ubicar un proceso nuevo?</b>

    div Estrategias
    ul
      li.fragment <strong>First-fit</strong>. En el primer lugar disponible.
      li.fragment <strong>Best-fit</strong>. En el que deja menos espacio libre (el más pequeño posible).
      li.fragment <strong>Worst-fit</strong>. En el que deja más (el más grande).

    div.framgent ¿Cuál es mejor?

  section#spaces5
    div <b>Problema: FRAGMENTACION</b>

    div En dos variedades

    ul
      li.fragment <b>Fragmentación Externa</b>: Hay espacio para otro proceso, pero no contiguo.
      li.fragment <b>Fragmentación Interna</b>: Espacio sobre-asignado a un proceso.

  section#spaces6
    div <b>¿Cómo evitar la fragmentación externa?</b>

    div.fragment <b>Compactación</b>: fusionar huecos
    div.fragment == image_tag '/images/figures/02-fusion.png', :width=>"20%"

    div.framgment ¿Pero?
    ul
      li.fragment Es <b>costoso</b>. No voy esperar que mis 16GB se reacomoden.
      li.fragment ¿Otras soluciones? <span class="fragment">Técnicas de <i>memoria virtuual</i>: <span class="fragment"><b>segmentación</b>, </span><span class="fragment"><b>paginación</b>

section#seg
  h2 Segmentación

  section#seg1
    div Espacio de direcciones se divide en segmentos lógicos
    ul
      li.fragment  Código
      li.fragment  Variables globales
      li.fragment  <em>Heap</em> (para asignación dinámica de memoria)
      li.fragment  <em>Stacks</em> para cada <em>thread</em>
      li.fragment  Código de la librería estándar de C

    div == image_tag '/images/figures/02-8_07.pdf.png', :width=>"20%"


  section#seg2

    div Cada <b>segmento</b> se puede cargar en regiones distintas de memoria.

    div Segmentos poseen: identificador y longitud

    div == image_tag '/images/figures/02-8_07.pdf.png', :width=>"20%"

    div Una dirección de memoria específica en memoria segmentada está formada por una tupla con dos datos (un par):
      $\langle$ <code>numeroDeSegmento</code>, <code>offset</code> $\rangle$

  section#seg3

    div Una dirección lógica es: $\langle$ <code>segmento</code>, <code>offset</code> $\rangle$

    div Información de segmentos cargados se almacena en: <b>Tabla de segmentos</b>

    div == image_tag '/images/figures/02-8_09.pdf.png', :width=>"40%"

  section#seg4

    div Una dirección lógica es: $\langle$ <code>segmento</code>, <code>offset</code> $\rangle$

    div MMU usa la <b>Tabla de segmentos</b> para obtener la <b>dirección física</b>

    div == image_tag '/images/figures/02-8_08.pdf.png', :width=>"50%"

section#pag
  h2 Paginación

  section#pag1
    div style="text-align:left;" Segmentación reduce el problema de la fragmentación externa <span class="fragment"> ... pero no lo soluciona</span>

    div.fragment style="text-align:left;" <b>Paginación</b> divide el espacio virtual de direcciones en regiones de igual tamaño
    ul
      li.fragment Espacio virtual (lógico) de direcciones se divide en <b>páginas</b>
      li.fragment Espacio físico de direcciones se divide en <b>frames</b> (marcos)
      li.fragment Páginas y <i>frames</i> son del mismo tamaño


    div.fragment ¿De qué tamaño son las páginas de su sistema?

  section#pag2
    div Dirección de memoria paginada está compuesta de<br/>
        $\langle$ <code>numeroDePagina</code>, <code>offset</code> $\rangle$

    div ==image_tag '/images/figures/02-8_10.pdf.png', :width=>"60%"

  section#pag3

    div ==image_tag '/images/figures/02-8_11.pdf.png', :width=>"45%"


  section#pag4
    div style="text-align:left;" Tamaños posibles de páginas y frames son determinados por <i>hardware</i>

    div style="text-align:left;" Al ser potencias de 2, se evitan sumas.

    ul
      li.fragment Direcciones lógicas de $m$-bit
      li.fragment Tamaño de página de $2^n$ bytes

    div 
      img src='/images/figures/02-in-8_1.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div.fragment Cantidad de páginas posibles: $2^{m-n}$

  section#pag5
    div style="text-align:left;" Dirección virtual: $m=4$ bit, $n=2$
    ul 
      li.fragment $2$-bit: número de página... $2^{m-n} = 4$ páginas
      li.fragment $2$-bit: <i>offset</i>... Páginas de tamaño $2^{n}=4$ byte.
      li.fragment Memoria física: 32 byte... $8$ <i>frames</i> de memoria.

    div 
      img src='/images/figures/02-8_12.pdf.png' style="background:none; border:none; box-shadow:none;" width="25%"

    div.fragment Dirección lógica: 1001 <span class="fragment">, ... dirección física: 0101</span>

  section#pag6
    div style="text-align:left;" Paginación elimina <b>fragmentación externa</b>...<span class="fragment">pero tenemos <b>fragmentación interna</b></span>

    div style="text-align:left;" Ejemplo: Páginas de $4$KB, y un proceso solicita $81$KB.
    ul
      li.fragment Se asignan 21 páginas de $4$KB... <span class="fragment">$3$KB desperdiciados.</span>

  section#pag7
    div style="text-align:left;" Ejemplo: Páginas de $8$KB. Direcciones virtuales de $16$-bit.

    ul
      li.fragment ¿Cuántas páginas?
      li.fragment ¿Tamaño de la tabla de páginas?

  section#pag8
    div style="text-align:left;" Ejemplo: Páginas de $4$KB. Direcciones virtuales de $32$-bit.

    ul
      li.fragment ¿Cuántas páginas? <span class="fragment">$2^{20}$</span>
      li.fragment ¿Tamaño de la tabla de páginas? <span class="fragment">$\geq 1$MB</span>

    div.fragment Accesos pueden hacerse lentos. ¿Por qué?

  section#pag9
    div <b>Translation Look-aside Buffer (TLB)</b>

    div style="text-align:left;" Caché en <i>hardware</i> para las entradas de la tabla de páginas (32 a 1024 entradas).

    div.fragment
      img src='/images/figures/02-8_14.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

  section#pag10
    div
      img src='/images/figures/02-8_14.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    ul
      li.fragment Tiempo de acceso a TLB: $100$ns
      li.fragment Tiempo de acceso a memoria: $500$ns
      li.fragment ¿Tiempo promedio de acceso con $80\%$ hit-rate?

  section#pag11
    div <b>Tablas de páginas jerárquicas</b>

    div
      img src='/images/figures/02-8_17.pdf.png' style="background:none; border:none; box-shadow:none;" width="35%"

  section#pag12
    div <b>Tablas de páginas jerárquicas</b>
    div Direccionamiento de dos niveles

    div
      img src='/images/figures/02-8_18.pdf.png' style="background:none; border:none; box-shadow:none;" width="60%"

    div
      img src='/images/figures/02-in-8_2.pdf.png' style="background:none; border:none; box-shadow:none;" width="35%"


  section#pag13
    div <b>Tablas de páginas jerárquicas</b>
    div Direcciones de 64-bit

    div
      img src='/images/figures/02-in-8_4.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div Con otro nivel de paginación

    div
      img src='/images/figures/02-in-8_5.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"


  section#pag14
    div <b>Tablas de páginas con <i>hash</i></b>

    div
      img src='/images/figures/02-8_19.pdf.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div Apropiadas para espacios de direcciones <em>sparse</em> (ralos)

  section#pag15
    div <b>Tablas de páginas invertida</b>

    ul
      li.fragment  Una entrada por frame (en lugar de página)
      li.fragment  Sólo una tabla en el sistema (no por proceso)
  
    div
      img src='/images/figures/02-8_20.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

    div Usada en 64-bit UltraSPARC, y PowerPC


/---------------------------------------------------------------------
/ Frame
  \frametitle{Direccionamiento}
  \framesubtitle{Otros conceptos comunes}
/
  \begin{description}
 //   li.fragment [<strong>Carga dinámica</strong>] Cargar sólo parte del proceso. Cuando una rutina se necesita,
                                se carga la sección necesaria de código.
 //   li.fragment [<strong>Bibliotecas</strong>] Conjunto de rutinas de uso común que se <em>agregan</em> al programa
      ul
        li.fragment  <strong>Enlace Estático</strong> (<code>.lib</code>, <code>.a</code>). Rutinas se enlazan dentro del binario final.
            ul
              li.fragment  +Rápido
              li.fragment  -Binario de mayor tamaño
              li.fragment  Modificación requiere re-compilación
            
        li.fragment  <strong>Enlace Dinámico</strong> (<code>.dll</code>, <code>.so</code>). Rutinas se enlazan con un <em>stub</em>: 
                              código representante de la rutina. Rutina se carga al llamarla.
            ul
              li.fragment  -Lento, pero sólo al primer acceso
              li.fragment  +Binario más pequeño
              li.fragment  Pueden reemplazarse <em>en caliente</em> (con un esquema de versiones)


section#virmem
  h2 Memoria Virtual

  section#virmem1

    div style="text-align:left;" Segmentación y paginación intentan dar la ilusión que toda la memoria es contínua.

    div.fragment style="text-align:left;" ... pero el programa aún debe estar completamente en memoria

    div.fragment style="text-align:left;" Pero no es siempre necesario.

    div.fragment style="text-align:left;" &nbsp<br/>&nbsp;<br/>

    ul
      li.fragment Carga dinámica
      li.fragment ¿Se requiere todo el código en memoria? ¿Librerías (estáticas y dinámicas)?
      li.fragment ¿Y si un proceso solicita más memoria que la memoria física del sistema?

  section#virmem2

    div <i>Frames</i> se cargan de disco a medida que se necesitan.

    div
      img src='/images/figures/02-9_01.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

  section#virmem3
    div Bibliotecas compartidas se asigna a <em>frames</em> ya cargados

    div
      img src='/images/figures/02-9_03.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

  section#virmem4
    div style="text-align:left;" <b>Paginación por demanda</b> <span class="fragment">Primera etapa: mantener registro de páginas cargadas</span>
    
    ul.fragment
      li Bit adicional en tabla de páginas
      ul
        li <em>Valid</em>: Página en memoria
        li <em>Invalid</em>: Página almacenada en disco, pero no en memoria
      
      li.fragment  Al detectar un acceso a una página <em>invalid</em>, ésta se carga dinámicamente y marca el bit a <em>valid</em>
  
    div
      img src='/images/figures/02-9_05.pdf.png' style="background:none; border:none; box-shadow:none;" width="30%"
  
  section#virmem5
    div style="text-align:left;" Segunda etapa: cargar páginas que se necesiten
  
    div style="text-align:left;" Proceso de carga se activa ante un <strong><i>page-fault</i></strong>
  
    div
      img src='/images/figures/02-9_06.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    ul
      li.fragment  Proceso podría empezar con una única página en memoria: <strong>paginación por demanda pura</strong>
  
  section#virmem6
    div style="text-align:left;" Rendimiento de la paginación por demanda
    ul
      li.fragment  $p$, probabilidad de <em>page fault</em>
      li.fragment  $t_{ma}$, tiempo de acceso a memoria, $\sim 200 \times 10^{-9}s$
      li.fragment  $t_{pf}$, tiempo generado por <em>page fault</em>
  
    div.fragment style="text-align:left;" Tiempo efectivo de acceso a memoria, $t_e$: 
    div.fragment &nbsp; $t_e = (1-p) \times t_{ma} + p \times t_{pf}$
  
    div.fragment style="text-align:left;" Con $t_{pf} = 8 \text{ms}$:
    div.fragment &nbsp; $t_{e} = 200 + 7999800 p$

    div.fragment style="text-align:left;" Si queremos que la degradación no sea mayor a $10\%$: 
    div.fragment &nbsp; $220 > 200 + 7999800p \Rightarrow p < 0.0000025$

  section#virmem7
    div style="text-align:left;" Al hacer un <code>fork()</code> se <em>copia</em> la memoria del padre al hijo.
  
    ul
      li.fragment  ¿Y si el hijo no escribe en su memoria o hace inmediatamente <code>exec()</code>?
  
    div.fragment Estrategia <strong>copy-on-write</strong> mantiene las páginas del padre como <em>región compartida para el hijo</em>
  
    div
      img src='/images/figures/02-9_07.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    div
      img src='/images/figures/02-9_08.pdf.png' style="background:none; border:none; box-shadow:none;" width="40%"

    /  Instrucción <code>vfork()</code> implementa <code>fork</code> sin copia de páginas (ni con <em>copy-on-write</em>)
  

/---------------------------------------------------------------------
section#reemp
  h2 Reemplazo de páginas

  section#reemp1

    div Cuando no hay espacio en memoria se necesita <i>reemplazar una página </i>

    div
      img src='/images/figures/02-9_09.pdf.png' style="background:none; border:none; box-shadow:none;" width="55%"

  section#reemp2

    div Sistema Operativo ejecuta un algoritmo para elegir una página como <i>víctima</i> a reemplazar.

    div
      img src='/images/figures/02-9_10.pdf.png' style="background:none; border:none; box-shadow:none;" width="55%"

  section#reemp3

    div
      img src='/images/figures/02-9_10.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

    div Dos transferencias de páginas (pasos 1 y 3)

    ul
      li.fragment  Páginas que no han sido modificadas no necesitan escribirse a disco
      li.fragment  <strong>Modify bit</strong> o <strong>Dirty bit</strong> indican si la página ha sido modificada desde la última vez que se cargó
      li.fragment  Páginas <em>read-only</em> nunca modifican su <strong>dirty bit</strong>
  
  section#reemp4
  
    div ¿Cuál conviene reemplazar? ... <span class="fragment">una que genere pocos <i>page faults</i></span>

    div Supongamos páginas que almacenan 100 direcciones. Con esta secuencia de acceso:

    div.fragment 0145, 0400, 0102, 0670, 0110, 0672, 0112, 0198, 0153, 0602, 0170

    div.fragment Esto significa que se accede a las siguientes páginas:

    div.fragment 1,4,1,6,1,6,1,6,1
      
  section#reemp5

    div
      img src='/images/figures/02-9_11.pdf.png' style="background:none; border:none; box-shadow:none;" width="45%"

    div La tasa de <i>page faults</i> también depende de la cantidad de <i>frame</i>s disponibles.

  section#reemp6

    h3 Reemplazo FIFO

    div Reemplazar la página que fue cargada hace más tiempo

    div
      img src='/images/figures/02-9_12.pdf.png' style="background:none; border:none; box-shadow:none;" width="65%"

    ul.fragment
      li  +Fácil de implementar
      li  -Comportamiento impredecible
  
  section#reemp7

    div Aumentar la cantidad de <em>frames</em> debe disminuir la cantidad de <em>page faults</em>
  
    ul
      li.fragment  Ejemplo. Secuencia 1,2,3,4,1,2,5,1,2,3,4,5
      li.fragment  Con 3 frames genera 9 <em>page faults</em>
      li.fragment  Con 4 frames genera 10 <em>page faults</em> (¿?)
  
    div
      img src='/images/figures/02-9_13.pdf.png' style="background:none; border:none; box-shadow:none;" width="35%"
  
    div Este problema se conoce como <strong>anomalía de Bélády</strong>. Fue planteada por el húngaro László Bélády, 1969.

  section#reemp8

    h3 Reemplaza óptimo

    div Reemplaza la página que no será usada durante el mayor tiempo (en el futuro)

    div
      img src='/images/figures/02-9_14.pdf.png' style="background:none; border:none; box-shadow:none;" width="65%"

    li.fragment +Óptimo
    li.fragment +No sufre la anomalía de Bélády
    li.fragment -Difícil de implementar, pues requiere conocimiento futuro (como SJF)
  
  section#reemp9

    h3 Reemplaza LRU (<i> Least Recently Used</i>)

    div Reemplazar la página que no ha sido usada por más tiempo

    div
      img src='/images/figures/02-9_15.pdf.png' style="background:none; border:none; box-shadow:none;" width="65%"
  
    div.fragment Compromiso más razonable para el óptimo. ¿Cómo implementarlo?
    ul
      li.fragment  Contadores, actualizado con valor de <em>timer</em>
      li.fragment  <em>Stack</em>, el último acceso avanza al tope del <em>stack</em>
      li.fragment En cualquier caso se requiere ayuda de <em>hardware</em>

  section#reemp10
    
    h3 Aproximación a LRU

    div Si no hay soporte de <em>hardware</em>, se puede aproximar el comportamiento de LRU
  
    ul
      li.fragment  <strong>Reference bit</strong> se marca para indicar páginas referenciadas
      li.fragment  Permite determinar qué páginas se han usado y cuáles no (sin orden)
  
    div.fragment Una técnica para incorporar orden:

    ul
      li.fragment  8-bit reference (<em>reference byte</em>) funcionan como "bit de historia"
      li.fragment  A intervalo $r$ ($\sim 100$ms) se hace <em>right shift</em> del <em>reference bit</em>
      li.fragment  Frame con mayor <em>reference byte</em> es el usado más recientemente    
  
    div.fragment Valores pueden no ser únicos. Entre ellos se decide de manera FIFO.
  
  section#reemp11

    div <b>Algoritmo de segunda oportunidad:</b> Inicialmente, FIFO, ordenado por tiempo de carga. 

    ul
      li.fragment  Reference bit 0: se reemplaza
      li.fragment  Reference bit 1: 2da oportunidad. Se cambia a 0, se establece tiempo de carga al tiempo actual, y se pasa a la siguiente página
      
    div
      img src='/images/figures/02-9_17.pdf.png' style="background:none; border:none; box-shadow:none;" width="30%"
  
    div ¿Qué pasa si todos los bit están marcados como 1?

  section#reemp12

    div <b>Segunda oportunidad mejorada</b>

    div Segunda oportunidad, considerando el par (<em>reference bit</em>, <em>dirty bit</em>)
  
    ul
      li.fragment Si es (0,0), no usado recientemente ni modificada
      ul
        li.fragment  Buena víctima
      
      li.fragment Si es (0,1), no usada recientemente, pero modificada
      ul
        li.fragment  Casi buena víctima. Requiere escribirla.
      
      li.fragment Si es (1,0), recientemente usada, pero no modificada
      ul
        li.fragment  Probablemente será leída pronto
      
      li.fragment Si es (1,1), recientemente usada, y modificada
      ul
        li.fragment  Probablemente será leída pronto
      
  section#reemp13

    h3 Otros algoritmos

    div Con contador de accesos (costoso de implementar)
    ul
      li.fragment  <strong>Least Frequently Used</strong>. Una página muy accedida debe tener alto contador.
      ul
        li.fragment  ¿Y si se usó solo al inicio?
        li.fragment  Se puede complementar haciendo <em>shift</em> del contador periódicamente
       
      li.fragment  <strong>Most Frequently Used</strong>. La página que tiene pocos accesos probablemente fue cargada recientemente y aún no ha sido muy usada

section#last
  
  h2 Asignación de frames

  section#last1
    div ¿Cuántos <em>frames</em> asignar a cada proceso?
  
    div <strong>Mínimo</strong>
    ul
      li.fragment  Puede ser definido por la arquitectura
      li.fragment  O bien, depender de la cantidad de direcciones referenciables en una instrucción
      ul
        li.fragment  <code>load r1, 0x0160</code>. Dos frames: para la instrucción y para la dirección.
        li.fragment  Más complejo cuando se permiten indirecciones
  
    div <strong>Máximo</strong>
    ul
      li.fragment  ¿Cómo dividir $m$ <em>frames</em> entre $n$ procesos?
  

  section#last2
    div $m$ <em>frames</em> y $n$ procesos
    ul
      li.fragment  <strong>Asignación equitativa</strong>: $\lfloor m/n \rfloor$ a cada uno. 
      li.fragment  <strong>Asignación proporcional</strong>: sea $s_i$ el tamaño de la memoria virtual del proceso $p_i$, cada proceso recibe $a_i$ <em>frames</em>: 
          
          \[ a_i = \frac{s_i}{\sum{s_i}} \times m \]
          
    div Proporción también puede estar relacionada a la prioridad del proceso
          
  section#last3  
    
    h3 Thrashing

    div Cada <em>page fault</em> genera tráfico entre disco y memoria de <em>al menos</em> una página.
  
    div.fragment Con alta tasa de <em>page fault</em> el sistema gasta más tiempo copiando <em>frames</em> entre disco y memoria

    div
      img src='/images/figures/02-9_18.pdf.png' style="background:none; border:none; box-shadow:none;" width="30%"

    ul
      li.fragment  Baja utilización de CPU
      li.fragment  <em>Scheduler</em> incrementa nivel de multiprogramación
      li.fragment  Procesos nuevos requieren <em>frames</em>.
      li.fragment  S.O. quita <em>frames</em> a procesos en ejecución
      li.fragment  Procesos en ejecución aumentan su tasa de <em>page fault</em>
      li.fragment  S.O. gasta más tiempo cargando <em>frames</em>
      /li.fragment  Baja utilización de CPU
  

  section#last4

    h3 Modelo de <i>working set</i>

    div Conjunto de páginas usadas en los últimos $\Delta$ accesos

    div
      img src='/images/figures/02-9_20.pdf.png' style="background:none; border:none; box-shadow:none;" width="60%"

    div $\Delta$ determina el tamaño del <em>working set</em> del proceso $i$: $\text{WSS}_i$
  
    div Demanda por páginas: $D=\sum{\text{WSS}_i}$
  
    div Si hay $m$ frames, y $D > m$, entonces habrá <em>thrashing</em>

  section#last5

    h3 Working set

    div ¿Cómo implementarlo?: aprovechando los <em>reference bit</em>
  
    ul
      li.fragment  Observar <em>reference bit</em> a intervalos regulares, cada $R$ referencias
      li.fragment  <em>Reference bit</em> se copian y se borran
      li.fragment  En la siguiente observación se comparan los valores copiados y los nuevos <em>reference bit</em>.
      li.fragment  Páginas modificadas se mantienen dentro del <em>working set</em>
  
    div Permite aproximar el <em>working set</em>, a menor costo que analizar todas las referencias


