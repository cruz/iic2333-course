---
title: Capa de Transporte
layout: slide
---

section
  h2 Protocolos de Transporte

  section
    blockquote style="background:#B7E1CD;" <b>Objetivo</b>: Conseguir que un mensaje llegue desde <i>emisor</i> a <i>receptor</i>

    div
      img src='/images/figures/10-transporte.png' style="background:none; border:none; box-shadow:none;" width="35%"

    /div style="text-align:left;" Entonces, ¿qué hacían las otras capas?

    /ul
      li Física: transmisión de bits a través de un enlace
      li Enlace: comunicación a través de un enlace
      li Red: enrutamiento de <b>paquetes</b> de <i>origen</i> a <i>destino</i>
      li Transporte: transmisión de <b>mensajes</b> desde <i>origen</i> a <i>destino</i>

    
  /section
    h3 Enlace
    div
      img src='/images/figures/07-linkhops.png' style="background:none; border:none; box-shadow:none;" width="80%"

  /section
    h3 Red
    div
      img src='/images/figures/09-network.png' style="background:none; border:none; box-shadow:none;" width="35%"

  /section
    h3 Transporte
    div
      img src='/images/figures/10-transporte.png' style="background:none; border:none; box-shadow:none;" width="35%"

  section
    /div style="text-align:left;" Protocolos de transporte transmiten información de un proceso en <i>emisor</i> a un proceso en <i>host</i> receptor
    ul
      li <b>Emisor</b>. Recibe un mensaje de capa de aplicación, lo divide en segmentos, y solicita a la capa de red que envíe los segmentos al receptor. Routers no examinan <i>headers</i> de transporte.
      li <b>Receptor</b>. Recibe segmentos, los ensambla para formar el mensaje, y lo entrega a la capa de aplicación.
  
    br
    br

    div style="text-align:left;" Dos protocolos representativos de medios de transporte:
    ul
      li <b>TCP</b>: Entrega confiable y ordenada. Control de flujo. Establecimiento de conexión.
      li <b>UDP</b>: Entrega no confiable y desordenada. Mejor esfuerzo.

  section
    h3 Segmentos

    div style="width:65%; vertical-align:middle; display:inline-block;" 

      div Mensaje se divide en segmentos.
    
      br
      div Segmentos se transmiten en paquetes IP.

      br

      div ¿Cómo identificar mensajes a distintos procesos?
      ul
        li <b>Puerto</b> permite identificar procesos dentro del nodo emisor o del nodo receptor.
        li <b>Puerto</b> permite <b>multiplexar</b> mensajes
  
    div style="width:35%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-segmento.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Multiplexión

    div tyle="text-align:left;" Proceso envían mensajes a través de <b>sockets</b> del Sistema Operativo

    br

    ul
      li Cada <b>socket</b> se crea con un número de puerto específico
      li Cada <i>host</i> puede tener múltiples <b>sockets</b> abiertos

    div
      img src='/images/figures/10-sockets.png' style="background:none; border:none; box-shadow:none;" width="50%"

  /section
    h3 Multiplexión y Demultiplexión

    div style="text-align:left;" Algunos puertos están reservados

    ul
      li Puerto 80, para protocolo de aplicación HTTP
      li Puerto 21, para protocolo de aplicación FTP
      li 16-bit para puertos. 0 a 65536.
      li Puertos 0 a 1023, reservado para puertos conocidos.
      li RFC1700 lista <i>puertos conocidos</i>, <b>well-known ports</b>. Mantenido por IANA (RFC3232)

    div
      img src='/images/figures/10-sockets.png' style="background:none; border:none; box-shadow:none;" width="40%"

  section
    h3 Demultiplexión sin conexión

    div style="text-align:left;" Segmento UDP identificado por: $\langle$IP destino, puerto destino$\rangle$
  
    ul
      li Receptor observa el puerto de destino
      li Pasa el segmento al proceso asociado al puerto de destino

    div
      img src='/images/figures/10-udpports.png' style="background:none; border:none; box-shadow:none;" width="50%"

  section
    h3 Demultiplexión con conexión

    div Segmento TCP identificado por: $\langle$ IP origen, puerto origen, IP destino, puerto destino$\rangle$
  
    div Servidores pueden gestionar múltiples conexiones TCP
    ul
      li Se pueden asociar distintos sockets a distintos clientes

    div
      img src='/images/figures/10-tcpports.png' style="background:none; border:none; box-shadow:none;" width="50%"

  /section
    h3 TCP versus UDP

    div
      img src='/images/figures/10-udpvtcp.png' style="background:none; border:none; box-shadow:none;" width="60%"


section
  h2 UDP

  section 
    h3 User Datagram Protocol

    div style="width:70%; vertical-align:middle; display:inline-block;" 

      ul
        li Servicio de "mejor esfuerzo" (best-effort). 
        li Segmentos pueden perderse.
        li Segmentos pueden llegar en distinto orden.
      
      br
      br

      div Servicio <b>no orientado a conexión</b> (<i>connection-less</i>)
      ul
        li No se establece conexión previa
        li No mantiene estado de conexión
        li Cada segmento se gestiona de manera independiente

      br
      br

      div Segmento UDP solo tiene 8 byte de <i>overhead</i>
  
    div style="width:30%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-udpsegment.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 UDP Segment

    div style="width:70%; vertical-align:middle; display:inline-block;" 

      div ¿Por qué mejor UDP?
      ul
        li Aplicación puede controlar directamente el envío
        li No hay demora en establecer conexión
        ul style='font-size:24px;'
          li Menor <i>overhead</i> de tiempo

        li No se reservan recursos
        li Menor <i>overhead</i> de espacio: 8 byte
        ul style='font-size:24px;'
          li TCP tiene 20 byte

  

    div style="width:30%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-udp-joke.png' style="background:none; border:none; box-shadow:none;" width="100%"


section
  h2 Reliable Data Transfer

  section
    div style="text-align:left;" <b>Desafío</b>: Proveer transferencia confiable (<i>reliable</i>) sobre un medio no confiable (<i>unreliable</i>)

    div
      img src='/images/figures/10-rdt.png' style="background:none; border:none; box-shadow:none;" width="60%"

  section
    div <b>Versión 1.0</b>. Canal de transmisión confiable.

    div style="width:60%; vertical-align:middle; display:inline-block;" 
      div Supuesto  fuerte, pero simple.
      br
      div <b>Sender</b>
      ul style='font-size:28px;'
        li Al recibir solicitud de envío, crea un paquete y envía

      br
      div <b>Receiver</b>
      ul style='font-size:28px;'
        li Al recibir paquete, extrae mensaje y lo pasa a aplicación

      br
      br
      div.fragment <b>Problema</b>: Los paquetes pueden llegar con errores

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-rdt-v1.png' style="background:none; border:none; box-shadow:none;" width="100%"


  section
    div <b>Versión 2.0</b>. Protocolo ARQ (Automatic Repeat reQuest)
    ul style='font-size:28px;'
      li Detección de errores. Envía <i>checksums</i>. 
      li Paquetes de <i>feedback</i>. ACK (<i>acknowledgment</i>) y NAK (<i>negative ACK</i>)
      li Retransmisiones.

    div
      img src='/images/figures/10-rdt-v2-send.png' style="background:none; border:none; box-shadow:none;" width="60%"
      img src='/images/figures/10-rdt-v2-recv.png' style="background:none; border:none; box-shadow:none;" width="40%"

    div.fragment ¿ACK o NAK con errores? El <i>sender</i> no sabe si el <i>receiver</i> recibió correctamente o no.
    ul style='font-size:28px;'
      li ¿Retransmitir al recibir un ACK o NAK corrupto? Pueden llegar duplicados.


  section
    div <b>Versión 2.1</b>. Agregar un <b>sequence number</b>. Por ahora, 1-bit.

    div
      img src='/images/figures/10-rdt-v21-send.png' style="background:none; border:none; box-shadow:none;" width="50%"
      img src='/images/figures/10-rdt-v21-recv.png' style="background:none; border:none; box-shadow:none;" width="50%"

  section
    div <b>Versión 2.2</b>. Podemos eliminar los NAK. Cada ACK adjunta el <b>sequence number</b>

    div
      img src='/images/figures/10-rdt-v22-send.png' style="background:none; border:none; box-shadow:none;" width="50%"
      img src='/images/figures/10-rdt-v22-recv.png' style="background:none; border:none; box-shadow:none;" width="50%"

    div.fragment ¿Y si se pierden paquetes?

  section
    div <b>Versión 3.0</b>. <b>Timeout</b> para retransmisión en el <i>sender</i>.

    div
      img src='/images/figures/10-rdt-v3-send.png' style="background:none; border:none; box-shadow:none;" width="50%"

  section
    div (a) Funcionamiento sin pérdida. (b) Con un paquete perdido

    div
      img src='/images/figures/10-rdt-sequence-a.png' style="background:none; border:none; box-shadow:none;" width="60%"


  section
    div (c) Funcionamiento con ACK perdido. (d) Con un <i>timeout</i> prematuro

    div
      img src='/images/figures/10-rdt-sequence-b.png' style="background:none; border:none; box-shadow:none;" width="60%"

  section
    div style="text-align:left;" Protocolos mandan de un paquete a la vez (<i>stop and wait</i>). Se envían varios paquetes simultáneos en modo <i>pipelined</i>.

    div
      img src='/images/figures/10-rdt-pipeline.png' style="background:none; border:none; box-shadow:none;" width="60%"

    div style="text-align:left;" Se necesitan más características.
    ul
      li Números de secuencia deben ser incrementales
      li Tanto emisor como receptor necesitan <i>buffers</i>
      li Dos enfoques para manejar paquetes: <b>Go-Back-N</b>, <b>Selective Repeat</b>

  section
    h3 Go-back-N

    div style="width:70%; vertical-align:middle; display:inline-block;" 

      div
        img src='/images/figures/10-rdt-gbn.png' style="background:none; border:none; box-shadow:none;" width="100%"

      ul
        li Emisor puede mantener hasta $N$ paquetes sin ACK
        li Receptor envía ACK por el último paquete recibido correctamente
        li Emisor usa <i>timer</i> para paquete más antiguo sin ACK
        ul style='font-size:28px;'
          li Si el <i>timer</i> expira, se retransmite todo el grupo de paquetes sin ACK
          li <code>base</code> es el paquete más antiguo que aún no tiene ACK
          li <code>nextseqnum</code> es el próximo número de secuencia a usar
          li <code>N</code> es un <i>window size</i>. También se conoce como <i>sliding window protocol</i>
        li Ejemplo con <code>N=4</code>

    div style="width:30%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-rdt-gbn-2.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 Selective Repeat

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      div
        img src='/images/figures/10-rdt-sr.png' style="background:none; border:none; box-shadow:none;" width="80%"


      ul style='font-size:28px;'
        li Emisor puede mantener hasta $N$ paquetes sin ACK
        li Receptor envía ACK para cada paquete individual
        li Emisor usa <i>timer</i> para paquete más antiguo sin ACK
        ul style='font-size:24px;'
          li Si el <i>timer</i> expira, se retransmite <b>solo</b> paquetes sin ACK
      
    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-rdt-sr-2.png' style="background:none; border:none; box-shadow:none;" width="100%"

section
  h2 TCP

  section
    h3 Transport Control Protocol

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      ul
        li Protocolo de transmisión fiable
        li Transmisión encadenanada <i>chained</i>
        li Control de flujo a través del tamaño de la ventana
        li Buffer en emisor y en receptor
        li Orientado a conexión
        ul style='font-size:24px;'
          li Protocolo de establecimiento de conexión (<i>handshake</i>) antes de enviar paquetes de datos
      
    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-tcp-segment.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section

    div style="width:60%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/10-tcp-segment-div.png' style="background:none; border:none; box-shadow:none;" width="80%"

      ul
        li Tamaño máximo de segmento: <b>MSS</b>, <i>Maximum Segment Size</i>
        li Números de secuencia además cuentan bytes en la secuencia
        li ACK contienen el <i>sequence number</i> del siguiente byte que se espera. <b>Cumulative ACKs.</b>
        li Mensaje de respuesta funciona también como ACK. <b>Piggybacked ACK</b>

    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-tcp-seq.png' style="background:none; border:none; box-shadow:none;" width="100%"
      div Ejemplo: TELNET

  section
    div Algoritmo de transmisión fiable de TCP

    div style="width:55%; vertical-align:middle; display:inline-block;" 

      img src='/images/figures/10-tcp-sr-a.png' style="background:none; border:none; box-shadow:none;" width="80%"

      ul
        li <code>SendBase</code> es la base de la ventana
        li <code>NextSeqNum</code> se actualiza al crear un segmento nuevo para enviar
        li Al expirar el <i>timer</i> se retransmite el segmento con menor <i>sequence number</i>.
        ul style='font-size:24px;'
          li El paquete enviado, o el ACK pueden haberse perdido
        li Si llega un ACK con valor mayor a <code>SendBase</code>, se actualiza <code>SendBase</code>
        ul style='font-size:24px;'
          li Esto significa que ya se han recibido los paquetes con valor menor a <code>SendBase</code>
          li Puede haberse perdido el ACK de los paquetes anteriores
          li Este es el funcionamiento del <b>cumulative ACK</b>


    div style="width:45%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-tcp-alg.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Caso: ACK perdido y retransmisión

    div style="width:60%; vertical-align:middle; display:inline-block;"

      div Si el ACK se pierde, se produce <i>timeout</i>
      ul style='font-size:24px;'
        li <i>A</i> reenvía el paquete más antiguo sin ACK (Seq=92)
        li <i>A</i> reinicia el <i>timer</i>
        li <i>B</i> recibe Seq=92 duplicado. Lo descarta, pero reenvía ACK

      br
      br

      img src='/images/figures/10-tcp-alg-case2.png' style="background:none; border:none; box-shadow:none;" width="80%"


    div style="width:40%; vertical-align:middle; display:inline-block;" 
      img src='/images/figures/10-tcp-caso1.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Caso: <i>Timeout</i> prematuro

    div style="width:60%; vertical-align:middle; display:inline-block;"

      div <i>Timeout</i> ocurre antes que llegue el ACK
      ul style='font-size:24px;'
        li <i>A</i> reenvía el paquete más antiguo sin ACK (Seq=92), y reinicia <i>timer</i> (Seq=92)
        li <i>A</i> recibe ACK y reinicia <i>timer</i>, por Seq=100
        li <i>A</i> NO reenvía Seq=100, ya que su ACK llega antes del <i>timeout</i>
        li <i>B</i> recibe Seq=92 duplicado. Lo descarta, pero envía (cumulative) ACK

      br

      img src='/images/figures/10-tcp-alg-case1-2-3.png' style="background:none; border:none; box-shadow:none;" width="70%"

    div style="width:40%; vertical-align:middle; display:inline-block;"
      img src='/images/figures/10-tcp-caso2.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    div Caso: Cumulative ACK evita retransmisión

    div style="width:60%; vertical-align:middle; display:inline-block;"

      div ACK por Seq=92 se pierde
      ul style='font-size:24px;'
        li El ACK=120 (ACK de Seq=100) llega antes del <i>timeout</i> de Seq=92
        li Cumulative ACK (ACK=120) indica que se ha recibido el Seq=92 y el Seq=100
        li <i>A</i> NO reenvía Seq=92
        li <i>A</i> incrementa <code>SendBase</code>

      br

      img src='/images/figures/10-tcp-alg-case3.png' style="background:none; border:none; box-shadow:none;" width="80%"

 
    div style="width:40%; vertical-align:middle; display:inline-block;"
      img src='/images/figures/10-tcp-caso3.png' style="background:none; border:none; box-shadow:none;" width="100%"


  section
    h3 Retransmisión rápida

    div style="width:65%; vertical-align:middle; display:inline-block;"

      ul
        li <i>Timeout</i>s pueden tomar mucho tiempo
        li Retransmisión rápida envía proactivamente segmentos probablemente perdidos, antes que ocurra un timeout


      img src='/images/figures/10-tcp-alg-case4.png' style="background:none; border:none; box-shadow:none;" width="70%"

    div style="width:35%; vertical-align:middle; display:inline-block;"
      img src='/images/figures/10-tcp-fr.png' style="background:none; border:none; box-shadow:none;" width="100%"

  section
    h3 TCP Handshake Protocol
    
    div <b>Establecimiento de conexión TCP</b>

    br

    ul
      li Paso 1. Cliente envía segmento <code>SYN</code> al servidor
      ul style='font-size:28px;'
        li Incluye número de secuencia inicial (de cliente)
      
      li Paso 2. Servidor recibe <code>SYN</code>, y responde con <code>SYN ACK</code>
      ul style='font-size:28px;'
        li Servidor asigna buffer
        li Servidor establece número de secuencia inicial (de servidor)
      
      li Paso 3. Cliente recibe <code>SYN ACK</code>, y responde con <code>ACK</code>
      ul style='font-size:28px;'
        li Este paquete ya puede contener datos

  section
    div
      img src='/images/figures/10-tcp-hs1.png' style="background:none; border:none; box-shadow:none;" width="50%"
      img src='/images/figures/10-tcp-hs2.png' style="background:none; border:none; box-shadow:none;" width="40%"

  section
    div Cliente y servidor
    div
      img src='/images/figures/10-tcp-hs3.png' style="background:none; border:none; box-shadow:none;" width="50%"
      img src='/images/figures/10-tcp-hs4.png' style="background:none; border:none; box-shadow:none;" width="40%"

  section
    h3 TCP Joke

    img src='/images/figures/10-tcp-joke.png' style="background:none; border:none; box-shadow:none;" width="60%"



