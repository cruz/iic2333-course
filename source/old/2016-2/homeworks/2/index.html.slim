---
title: Tarea 2
layout: activity
---

article
  section.top#intro
    h2 Scheduling
    /	 ----------

    p El <em>Scheduling</em> es el arte de escoger procesos.

    p Escoger los procesos no es trivial, ya que no se conoce mucho de los procesos, intentar conocer mucho de ellos es indecidible, y hacer un buen intento gasta tiempo en burocracia en vez de en avanzar.

    p La elección es importante para el sistema, ya que se busca que todos los procesos puedan avanzar de manera ``justa'', pero a la vez se intenta respetar la importancia de los procesos.

    p Usualmente se trata de un problema que intenta hacer que que eventualmente todos puedan terminar. Pero esa solución no siempre es la adecuada.


    section#realtime
      h4 Real-Time
      /	---------
      p En sistemas de tiempo real, se sabe de antemano que probablemente no hay recursos suficientes para realizar todo lo que se necesita, y que lo que se necesitaba hace mucho tiempo probablemente ya no es necesario.

      p Generalmente los sistemas de tiempo real tienen una carga determinada en donde es simple lograr asegurar que las esperas serán acotadas (O(1)), pero ese caso ideal no siempre ocurre.

      p En los sistemas sin cotas de carga simplemente no se puede cumplir con lo pedido, pero aún así hay que lograr hacer lo mejor posible.


      section#realtime
        h5 Waterfall Scheduling
        /	--------------------
        p Este <em>Scheduler</em> está pensado para servidores en donde existen algunos <em>daemons</em> que ejecutar por siempre, los que lanzan tareas pequeñas que se deben intentar cumplir.

        p Un caso de uso, es en servidores que computan algo para preparar una respuesta, pero que si no logran hacerlo a tiempo, entonces ya no será necesario prepararla (<em>timeout</em> en el cliente).

        h7 Setup
        /	-----
        p Existen $N$ colas de procesamiento, $c_1\cdots c_N$, cada una con $f(i)$ tokens, donde $f$ es una función creciente.

        p El <em>Scheduler</em> recorre las colas en orden.
        p En cada una intenta ejecutar los procesos usando $i$ tokens en cada uno (redondeando a siguiente múltiplo de $i$ si es necesario).

        p En cada cola hay 2 tipos de procesos,
        ul
          li Los que alcanzan a ejecutar
          ul
            li	Si devuelven el control antes, permanecerán en la misma cola, pero no devolverán sus tokens sin uso.
            li	Si agotan su tiempo, pasarán al final de la cola siguiente.

          li y los que no
          ul
            li	Pasarán al principio de la cola siguiente.


        p Además de las $N$ colas, existen 2 colas especiales.
        ul
          li
            La cola $c_0$, que es para los <em>daemons</em> en que se usa 1 token para hasta $f(0)$ procesos (como en la cola 1), pero no se avanza de cola.
            p Es exclusiva para los procesos con prioridad $PRI\_MAX$. El resto comienza en la cola 1. Las prioridades son irrelevantes salvo por la pertenencia o no a la cola $0$.

          li La cola $c_{N+1}$, es el sumidero, los procesos que lleguen a esa cola serán eliminados.





  br
  section#hw1
    h2 Tarea
    /  -----
    p En esta tarea van a implementar un <em>Scheduler</em> de tiempo real para #{link_to 'pintos', '/homeworks/pintos/', :target => '_blank'}.


    section#sched
      h5 Scheduler (70%)
      /	----------
      p Deberán implementar Waterfall Scheduling para $N$ colas.
      p Se evaluará correctitud, por lo que el funcionamiento es esencial.
      p Funciones y declaraciones importantes
      ul
        li: tt src/threads/thread.h
        ul
          li: tt enum thread_status
          li: tt enum scheduling_algorithm
          li: tt struct thread
          li: tt int queueCount
          li: tt PRI_MIN, PRI_MAX, PRI_DEFAULT

        br
        li: tt src/threads/thread.c
        ul
          li: tt thread_init
          p Inicializa el sistema de Threading. Es el "Constructor estático" (de la "clase") Thread.

          li Thread
          ul
            li: tt thread_start
            li: tt thread_tick
            li: tt thread_yield
            li: tt thread_block
            li: tt thread_unblock
            li: tt thread_exit
            li: tt thread_print_stats

          li Elección
          ul
            li: tt next_thread_to_run
            p Revisa la lista $ready$ que ya tiene pintos.
            p Si está vacía retorna <tt>idle_thread</tt>, si no, llama a la función apuntada por <small>:o</small> <tt>next_thread_to_run_function</tt>.
            p Si cambian la lista, deben arreglar esta decisión!

            li: tt next_thread_to_run_waterfall
            p Es seleccionada con $N$ colas usando el KernelFlag <tt>-wfN</tt>.
            p Actualmente implementa FIFO usando la lista $ready$ que ya tiene pintos.



    section#stats
      h5 Estadísticas (30%)
      /	-------------
      p Deberán calcular algunas estadísticas de los procesos y las colas del sistema.

      p Para los procesos,
      ul
        li Tokens asignados.
        li Cola en donde termina.
        li Cantidad de veces que
        ul
          li Ejecutó.
          li Yields.
          li Blocks.

      p Para las colas,
      ul
        li Tokens utilizados. (incluyendo los de redondeo)
        li Cantidad de procesos que
        ul
          li Ejecutaron.
          li No ejecutaron (avanzaron antes de hacerlo).
          li Hicieron yield (quedaron en la misma cola).
          li Se bloquearon (^)
          li Terminaron de ejecutar.


    section
      h5 Formalidades
      /  ------------

      p La tarea será entregada vía <code>git</code>
      ul
        li  La entrega es el Miércoles 12 de Octubre a las 23:59.
        li  Puede ser realizada en grupos de 2.
        li  Su repositorio DEBE ser privado, de lo contrario calificará como copia (alguien les podría haber copiado).
        li  La entrega será automatizada, basta que <a href="https://docs.google.com/forms/d/e/1FAIpQLSdAKPTHetbeOmDFN3lUE3O82jPYAd-WQWPGXEiU8NLaCVwENQ/viewform" target="_blank">registren</a> su grupo y repositorio
        ul
          li  Se revisará su branch <tt>master</tt>
          li  Como el repositorio debe ser privado, tendrán que permitir acceso especial al curso, autorizando al servidor de tareas acceder al contenido.
          ul
            li  Para esto basta <a href="https://confluence.atlassian.com/bitbucket/use-deployment-keys-294486051.html" target="_blank">registrar</a> la <a href="/os-id_rsa.pub">llave pública del curso</a> en las <em>Deployment Keys</em> de su repositorio.


      h5 Repositorio
      /  -----------
      p El código de la tarea se encuentra en <a href="https://bitbucket.org/Dietr1ch/pintos/" target="_blank">git</a> en el branch <tt>os16-2</tt>. Para trabajar en el deben <a href="https://bitbucket.org/Dietr1ch/pintos/fork" target="_blank">hacer un fork</a> PRIVADO!
      ul
        li  Lo más cómodo es que usen bitbucket, pero pueden usar otro host mientras sea privado (y puedan registrar la Deployment Key).
